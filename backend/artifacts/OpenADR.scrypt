
contract OpenADRContract {
  @state bytes eventType;
  @state bytes programID;
  @state int startTime;
  @state int duration;
  @state bytes payload;
  bytes __scrypt_ts_ctx_hashoutputs;
  int __scrypt_ts_ctx_value;
  constructor(bytes eventType, bytes programID, int startTime, int duration, bytes payload) {
    this.eventType = eventType;
    this.programID = programID;
    this.startTime = startTime;
    this.duration = duration;
    this.payload = payload;
  }
  public function updateEventOnChain(bytes newPayload, SigHashPreimage __scrypt_ts_txPreimage) {
    require(Tx.checkPreimageSigHashType(__scrypt_ts_txPreimage, SigHashType(b'41')));
    this.__scrypt_ts_ctx_hashoutputs = SigHash.hashOutputs(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_value = SigHash.value(__scrypt_ts_txPreimage);
    this.payload = newPayload;
    int amount = this.__scrypt_ts_ctx_value;
    bytes outputs = this.buildStateOutput(amount);
    require(this.__scrypt_ts_ctx_hashoutputs == hash256(outputs));
  }
  function buildStateOutput(int amount) : bytes {  return Utils.buildOutput(this.getStateScript(), amount);}
}